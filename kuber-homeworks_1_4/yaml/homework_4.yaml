# Задание 1. Создать Deployment и обеспечить доступ к контейнерам приложения по разным портам из другого Pod внутри кластера
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: two-pods
  labels:
    app: multiple-container
spec:
  replicas: 3 # Изенить для увеличения кол-во реплик pod's
  selector:
    matchLabels:
      app: multiple-container
  template:
    metadata:
      labels:
        app: multiple-container
    spec:
      containers:

      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

      - name: network-multitool
        image: wbitt/network-multitool
        env:
        - name: HTTP_PORT
          value: "8080"
        - name: HTTPS_PORT
          value: "11443"
        ports:
        - containerPort: 8080
          name: http-port
        - containerPort: 11443
          name: https-port

# Задание 2. Создать Service и обеспечить доступ к приложениям снаружи кластера
---
apiVersion: v1

kind: Service

metadata:
  name: node-port-svc
spec:
  selector:
    app: multiple-container
  type: NodePort
  ports:

    - name: nginx
      port: 80
      protocol: TCP
    
    - name: multitool
      port: 8080
      protocol: TCP
---

apiVersion: v1

kind: Service

metadata:
  name: cluster-ip-svc
spec:
  selector:
    app: multiple-container
  type: ClusterIP
  ports:

    - name: nginx
      port: 9001
      protocol: TCP
      targetPort: 80

    - name: multitool
      port: 9002
      protocol: TCP
      targetPort: 8080

---

apiVersion: v1
kind: Pod
metadata:
  name: multitool
  labels:
    role: test
spec:
  containers:
    - name: multitool
      image: wbitt/network-multitool
      ports:
        - name: web
          containerPort: 1180
          protocol: TCP
